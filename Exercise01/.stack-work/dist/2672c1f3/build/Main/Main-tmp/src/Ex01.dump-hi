
==================== FINAL INTERFACE ====================
2018-10-14 22:21:05.2903082 UTC

interface main@main:Ex01 7103
  interface hash: d3fa48b8a04d71351c338ffb4039f432
  ABI hash: f15ef4edbc37735376634f0d54ee5819
  export-list hash: 960bce9cb83a757424eeb4dd5144f6b9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fbe72dce7169ea56d81ede094b67e0dc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Ex01.define
  Ex01.eval
  Ex01.find
  Ex01.simp
  Ex01.simpAdd
  Ex01.simpDef
  Ex01.simpDvd
  Ex01.simpMul
  Ex01.simpSub
  Ex01.simpVar
  Ex01.Dict
  Ex01.EDict
  Ex01.Expr{Ex01.Add Ex01.Def Ex01.Dvd Ex01.Mul Ex01.Sub Ex01.Val Ex01.Var}
  Ex01.Id
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
2f1b455721c5f7cccec9e6946ec669e2
  $fEqExpr :: GHC.Classes.Eq Ex01.Expr
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Ex01.Expr Ex01.$fEqExpr_$c== Ex01.$fEqExpr_$c/= -}
2f1b455721c5f7cccec9e6946ec669e2
  $fEqExpr_$c/= :: Ex01.Expr -> Ex01.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Ex01.Expr b :: Ex01.Expr ->
                 case Ex01.$fEqExpr_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2f1b455721c5f7cccec9e6946ec669e2
  $fEqExpr_$c== :: Ex01.Expr -> Ex01.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
2f1b455721c5f7cccec9e6946ec669e2
  $fShowExpr :: GHC.Show.Show Ex01.Expr
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Ex01.Expr
                  Ex01.$fShowExpr_$cshowsPrec
                  Ex01.$fShowExpr_$cshow
                  Ex01.$fShowExpr_$cshowList -}
2f1b455721c5f7cccec9e6946ec669e2
  $fShowExpr1 :: Ex01.Expr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Ex01.Expr -> Ex01.$w$cshowsPrec 0 w) -}
2f1b455721c5f7cccec9e6946ec669e2
  $fShowExpr_$cshow :: Ex01.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Ex01.Expr ->
                 Ex01.$fShowExpr_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2f1b455721c5f7cccec9e6946ec669e2
  $fShowExpr_$cshowList :: [Ex01.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Ex01.Expr Ex01.$fShowExpr1) -}
2f1b455721c5f7cccec9e6946ec669e2
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Ex01.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Ex01.Expr ->
                 case w of ww { GHC.Types.I# ww1 -> Ex01.$w$cshowsPrec ww1 w1 }) -}
2f1b455721c5f7cccec9e6946ec669e2
  $w$cshowsPrec :: GHC.Prim.Int# -> Ex01.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
8dd6e9d4f779fd0450d512732af5b5bd
  $wsimpAdd :: Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ w :: Ex01.Expr w1 :: Ex01.Expr ->
                 let {
                   fail :: GHC.Prim.Void# -> Ex01.Expr
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ ds :: GHC.Prim.Void#[OneShot] ->
                     case w of wild {
                       DEFAULT -> Ex01.Add wild w1
                       Ex01.Val ds1
                       -> case ds1 of wild1 { GHC.Types.D# x ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==## x 0.0) of wild2 {
                            GHC.Types.False
                            -> case w1 of wild3 {
                                 DEFAULT -> Ex01.Add wild wild3
                                 Ex01.Val b
                                 -> Ex01.Val
                                      (case b of wild4 { GHC.Types.D# y ->
                                       GHC.Types.D# (GHC.Prim.+## x y) }) }
                            GHC.Types.True -> w1 } } }
                 } in
                 case w1 of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Ex01.Val ds
                   -> case ds of wild1 { GHC.Types.D# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x 0.0) of wild2 {
                        GHC.Types.False -> fail GHC.Prim.void#
                        GHC.Types.True -> w } } }) -}
e6efba7038cccf9ecfbdf046140ccaa8
  $wsimpDvd :: Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0],
     Unfolding: (\ w :: Ex01.Expr w1 :: Ex01.Expr ->
                 let {
                   fail :: GHC.Prim.Void# -> Ex01.Expr
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ ds :: GHC.Prim.Void#[OneShot] ->
                     case w of wild {
                       DEFAULT -> Ex01.Dvd wild w1
                       Ex01.Val a
                       -> case w1 of wild1 {
                            DEFAULT -> Ex01.Dvd wild wild1
                            Ex01.Val b -> Ex01.Val (GHC.Float.divideDouble a b) } }
                 } in
                 case w1 of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Ex01.Val ds
                   -> case ds of wild1 { GHC.Types.D# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x 1.0) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## x 0.0) of wild3 {
                             GHC.Types.False -> fail GHC.Prim.void#
                             GHC.Types.True -> Ex01.Dvd w Ex01.simpDvd1 }
                        GHC.Types.True -> w } } }) -}
6d933bf14e83f2c19a91f2e509868845
  $wsimpMul :: Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ w :: Ex01.Expr w1 :: Ex01.Expr ->
                 let {
                   fail :: GHC.Prim.Void# -> Ex01.Expr
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ ds :: GHC.Prim.Void#[OneShot] ->
                     case w of wild {
                       DEFAULT -> Ex01.Mul wild w1
                       Ex01.Val ds1
                       -> case ds1 of wild1 { GHC.Types.D# x ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==## x 1.0) of wild2 {
                            GHC.Types.False
                            -> case w1 of wild3 {
                                 DEFAULT -> Ex01.Mul wild wild3
                                 Ex01.Val b
                                 -> Ex01.Val
                                      (case b of wild4 { GHC.Types.D# y ->
                                       GHC.Types.D# (GHC.Prim.*## x y) }) }
                            GHC.Types.True -> w1 } } }
                 } in
                 case w1 of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Ex01.Val ds
                   -> case ds of wild1 { GHC.Types.D# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x 1.0) of wild2 {
                        GHC.Types.False -> fail GHC.Prim.void#
                        GHC.Types.True -> w } } }) -}
7b56e87b9d09a05c5e9a432da383d919
  $wsimpSub :: Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ w :: Ex01.Expr w1 :: Ex01.Expr ->
                 let {
                   fail :: GHC.Prim.Void# -> Ex01.Expr
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ ds :: GHC.Prim.Void#[OneShot] ->
                     case w of wild {
                       DEFAULT -> Ex01.Sub wild w1
                       Ex01.Val a
                       -> case w1 of wild1 {
                            DEFAULT -> Ex01.Sub wild wild1
                            Ex01.Val b -> Ex01.Val (GHC.Float.minusDouble a b) } }
                 } in
                 case w1 of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Ex01.Val ds
                   -> case ds of wild1 { GHC.Types.D# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x 0.0) of wild2 {
                        GHC.Types.False -> fail GHC.Prim.void#
                        GHC.Types.True -> w } } }) -}
94cd79bca1a8ace8a97b28aabf010bda
  type Dict k d = [(k, d)]
3d9890f6a2e04266b39588d003ef6ab4
  type EDict = Ex01.Dict GHC.Base.String GHC.Types.Double
2f1b455721c5f7cccec9e6946ec669e2
  data Expr
    = Val GHC.Types.Double
    | Add Ex01.Expr Ex01.Expr
    | Mul Ex01.Expr Ex01.Expr
    | Sub Ex01.Expr Ex01.Expr
    | Dvd Ex01.Expr Ex01.Expr
    | Var Ex01.Id
    | Def Ex01.Id Ex01.Expr Ex01.Expr
c2cd8d510ab6c41160a76d027403fd79
  type Id = GHC.Base.String
319df949919156e653f97dd7e4a57b5b
  define :: Ex01.Dict k d -> k -> d -> Ex01.Dict k d
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ @ k @ d d1 :: Ex01.Dict k d s :: k v :: d ->
                 GHC.Types.: @ (k, d) (s, v) d1) -}
26435ef3b18a2f589838ed8735f3f1d1
  eval :: Ex01.EDict -> Ex01.Expr -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ d :: Ex01.EDict e :: Ex01.Expr ->
                 case Ex01.simp d e of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Double
                   Ex01.Val a -> GHC.Base.Just @ GHC.Types.Double a }) -}
bb2ff70b472963c5be84d7b20fffead6
  find :: GHC.Classes.Eq k => Ex01.Dict k d -> k -> GHC.Base.Maybe d
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U> -}
abf1a51f93a156d704dd3bab67cf7724
  find_$sfind ::
    Ex01.Dict GHC.Base.String d -> GHC.Base.String -> GHC.Base.Maybe d
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
7618a1910c2510f56094e46a60e6c55e
  simp :: Ex01.EDict -> Ex01.Expr -> Ex01.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
d90a2c448ed115da758adba7ff9b5fe5
  simpAdd :: Ex01.EDict -> Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: Ex01.EDict w1 :: Ex01.Expr w2 :: Ex01.Expr ->
                 Ex01.$wsimpAdd w1 w2) -}
3a2abe5ecd6c34577f33a0656ea02377
  simpDef ::
    Ex01.EDict -> Ex01.Id -> Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ d :: Ex01.EDict v :: Ex01.Id ds :: Ex01.Expr e1 :: Ex01.Expr ->
                 case ds of wild {
                   DEFAULT -> Ex01.Def v wild e1
                   Ex01.Val a
                   -> Ex01.simp
                        (GHC.Types.: @ (GHC.Base.String, GHC.Types.Double) (v, a) d)
                        e1 }) -}
8d362b491399e9672924fe4603457320
  simpDvd :: Ex01.EDict -> Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: Ex01.EDict w1 :: Ex01.Expr w2 :: Ex01.Expr ->
                 Ex01.$wsimpDvd w1 w2) -}
cd20dab14aa7569c0f57a17735c5ecb4
  simpDvd1 :: Ex01.Expr
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Ex01.Val Ex01.simpDvd2) -}
6de542010ef91b82a738d713f698dbce
  simpDvd2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0) -}
ff748c4003787b7cbb03a9e0edd0fa4f
  simpMul :: Ex01.EDict -> Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: Ex01.EDict w1 :: Ex01.Expr w2 :: Ex01.Expr ->
                 Ex01.$wsimpMul w1 w2) -}
b3ca226e4b0ca4b75a944a7a7d2c6827
  simpSub :: Ex01.EDict -> Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: Ex01.EDict w1 :: Ex01.Expr w2 :: Ex01.Expr ->
                 Ex01.$wsimpSub w1 w2) -}
ca37c816439a1c6025fb7484c290bb27
  simpVar :: Ex01.EDict -> Ex01.Id -> Ex01.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ d :: Ex01.EDict v :: Ex01.Id ->
                 case Ex01.find_$sfind @ GHC.Types.Double d v of wild {
                   GHC.Base.Nothing -> Ex01.Var v GHC.Base.Just a -> Ex01.Val a }) -}
instance GHC.Classes.Eq [Ex01.Expr] = Ex01.$fEqExpr
instance GHC.Show.Show [Ex01.Expr] = Ex01.$fShowExpr
"SPEC find @ String _" [ALWAYS] forall @ d
                                       $dEq :: GHC.Classes.Eq GHC.Base.String
  Ex01.find @ [GHC.Types.Char] @ d $dEq = Ex01.find_$sfind @ d
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

